1.  Write out a generic SELECT statement.
SELECT <column>
FROM <table>
WHERE <condition>;

2.  Create a fun way to remember the order of operations in a SELECT statement, such as a mnemonic.
Super Fat Watermelon

3.  Create a pets database. Create a dogs table using this file. From the dogs table with the columns id, name, gender, age, weight, intake_date, breed, and in_foster, write statements to select the following pieces of data.
    - Display the name, gender, and age of all dogs that are part Labrador.
    - Display the ids of all dogs that are under 1 year old.
    - Display the name and age of all dogs that are female and over 35lbs.
    - Display all of the information about all dogs that are not Shepherd mixes.
    - Display the id, age, weight, and breed of all dogs that are either over 60lbs or Great Danes.
    Intake teams typically guess the breed of shelter dogs, so the breed column may have multiple words (for example, "Labrador Collie mix").

    Carissas-MacBook-Pro:databases carissacastro$ createdb -U postgres -w pets
    Carissas-MacBook-Pro:databases carissacastro$ psql -f /Users/carissacastro/Documents/Bloc/SEP/dogs.sql pets postgres
    CREATE TABLE
    INSERT 0 6
    Carissas-MacBook-Pro:databases carissacastro$ psql pets postgres
    psql (9.6.3, server 9.6.6)
    Type "help" for help.

    pets=# SELECT name, gender, age FROM dogs WHERE breed LIKE '%labrador%';
      name  | gender | age
    --------+--------+-----
     Boujee | F      |   3
     Marley | M      |   0
    (2 rows)

    pets=# SELECT id FROM dogs WHERE age < 1;
      id
    -------
     10002
     10004
    (2 rows)

    pets=# SELECT name, age FROM dogs WHERE gender = 'F' AND weight > 35;
      name  | age
    --------+-----
     Boujee |   3
    (1 row)
                          ^
    pets=# SELECT * FROM dogs WHERE breed NOT LIKE '%shepherd%';
      id   |   name    | gender | age | weight |       breed        | intake_date | in_foster
    -------+-----------+--------+-----+--------+--------------------+-------------+------------
     10001 | Boujee    | F      |   3 |     36 | labrador poodle    | 2017-06-22  |
     10002 | Munchkin  | F      |   0 |      8 | dachsund chihuahua | 2017-01-13  | 2017-01-31
     10004 | Marley    | M      |   0 |     10 | labrador           | 2017-05-04  | 2016-06-20
     10006 | Marmaduke | M      |   7 |    150 | great dane         | 2016-03-22  | 2016-05-15
     10007 | Rosco     | M      |   5 |    180 | rottweiler         | 2017-04-01  |
    (5 rows)

    pets=# SELECT id, age, weight, breed FROM dogs WHERE weight > 60 OR breed = 'great dane';
      id   | age | weight |   breed
    -------+-----+--------+------------
     10006 |   7 |    150 | great dane
     10007 |   5 |    180 | rottweiler
    (2 rows)


4.  From the cats table below, what pieces of data would be returned from these queries?
    - SELECT name, adoption_date FROM cats;

    name	     adoption_date
    Mushi	     2016-03-22
    Seashell
    Azul	     2016-04-17
    Victoire	 2016-09-01
    Nala

    - SELECT name, age FROM cats;

    name	     age
    Mushi	     1
    Seashell	 7
    Azul	     3
    Victoire	 7
    Nala	     1

5.  From the cats table, write queries to select the following pieces of data.
    - Display all the information about all of the available cats.
    SELECT * FROM cats WHERE adoption_date = '';
    - Choose one cat of each age to show to potential adopters.
    SELECT * FROM cats WHERE id = 00001 OR id = 00002 OR id = 00003;
    - Find all of the names of the cats, so you don’t choose duplicate names for new cats.
    SELECT names FROM cats;

6.  List each comparison operator and explain, in your own words, when you would use it. Include a real world example for each.
    - If you can’t list these from memory, do these flashcards until you can!
    < --> used for "less than", i.e. all accounts with a balance less than 0
    > --> used for "greater than", i.e. all people older than 20
    <= --> used for "less than or equal to", i.e. all shoes available in size 6 or less
    >= --> used for "greater than or equal to", i.e. all TV's for sale that are at least $500
    != --> used for "not equal to", i.e. all dresses that are not black
    = --> used for "equal to", i.e. all books by the author Dan Brown

7.  From the cats table below, what data would be returned from these queries?
    - SELECT name FROM cats WHERE gender = ‘F’;
    names
    Seashell
    Nala

    - SELECT name FROM cats WHERE age <> 3;
    names
    Mushi
    Seashell
    Victoire
    Nala

    - SELECT ID FROM cats WHERE name != ‘Mushi’ AND gender = ‘M’;
    ID
    00003
    00004
