1.  How do you find data that is held in two separate data tables?
Using JOIN statements

2.  Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN.
Give a real world example for each.
For this example, let's say that a zoo is trying to keep track of information about the various animals as well as trainers for each animal.
There are two tables, one holding info about each animal (id, type, name, trainer), the other containing info about
trainers (id, trainer_name, animal_name).  The following describes examples of the each query type:
CROSS JOIN - shows all combinations of the first and second tables
Example:  Show all possible combinations of animals and trainers

INNER JOIN - just shows query information where there is a match in both tables
Example:  show the type and name of animals that have a trainer

LEFT OUTER JOIN - shows matching info plus info from first table that does not match the join statements
Example:  show all animals, even if they do not have a trainer

RIGHT OUTER JOIN - shows matching info plus info from first table that does not match the join statements
Example:  show all trainers, even if they do not have an animal assigned

FULL OUTER JOIN - shows all info (matching plus not matching from each table)
Example:  show all animals and all trainers, including the ones that match

3.  Define primary key and foreign key. Give a real world example for each.
Primary key - an identification for each entry in a table
Example:  animal_id in the animal table
Foreign key - a primary key from another table
Example:  trainer_id in the animal table

4.  Define aliasing.
Aliasing is using an AS statement to assign a shorter word/letter to represent the full table name.

5.  Change this query so that you are using aliasing:
SELECT p.name, c.salary, c.vacation_days
FROM professor AS p
JOIN compensation AS c ON p.id = c.professor_id;

6.  Why would you use a NATURAL JOIN? Give a real world example.
NATURAL JOIN can be a more efficient method instead of using JOIN USING and then listing out all columns.  A NATURAL JOIN
could be used in the following scenario:
A local bookstore owner wants to know if any of the mystery books that are sold in the store are also on the best seller
list.  He could query the store inventory list and the best seller list, which would share the book title, book type, and author columns.


7.  Build an Employees table and a Shifts table with appropriate primary and foreign keys. Then, write queries to find the following information:
CREATE TABLE employees (id integer, employee text, shift_id integer);
CREATE TABLE shifts (id integer, day text);
-- List all employees and all shifts.
    SELECT employees.employee, shifts.day
    FROM employees
    FULL OUTER JOIN shifts
    ON employees.shift_id = shift.id
-- Create a list of all possible schedules.
    SELECT *
    FROM employees
    CROSS JOIN shifts

8.  Given the Dogs table (described below), the Adoptions table (described below),
the Adopters table (which has the columns id, first_name, last_name, address, and phone number),
and the Volunteers table (which has the columns id, name, address, phone_number, available_to_foster, and foster_id),
please write queries to retrieve the following information.
-- Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.
    SELECT V.name, D.name
    FROM Volunteers AS V
    LEFT OUTER JOIN Dogs AS D
    ON V.foster_id = D.id;

-- List the adopter’s name and the pet’s name for each animal adopted within the past month to be displayed as a ‘Happy Tail’ on social media.
    SELECT Adopters.first_name, Dogs.name
    FROM Adoptions
    JOIN Adopters ON Adopters.id = Adoptions.adopter
    JOIN Dogs ON Dogs.id = Adoptions.dog;

*-- Create a list of adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.
    SELECT Adopters.first_name
    FROM Adoptions
    RIGHT OUTER JOIN Adopters ON Adopters.id = Adoptions.adopter
    WHERE Adoptions.adopter IS NULL;

    SELECT *
    FROM Adopters
    CROSS JOIN Dogs

-- Display a list of all cats and all dogs who have not been adopted.
    SELECT Dogs.name
    FROM Adoptions
    RIGHT OUTER JOIN Dogs ON Dogs.id = Adoptions.dog
    WHERE Adoptions.dog IS NULL

    SELECT Cats.name
    FROM Adoptions
    RIGHT OUTER JOIN Cats ON Cats.id = Adoptions.cat
    WHERE Adoptions.cat IS NULL

*-- Create a list of volunteers who are available to foster. If they currently are fostering a dog, include the dog. Also include all
dogs who are not currently in foster homes.
    SELECT Volunteers.name, Dogs.name
    FROM Volunteers
    FULL OUTER JOIN Dogs ON Dogs.id = Volunteers.foster_id;

9.  Write a query to find the name of the person who adopted Seashell given the tables Cats (depicted below), Adoptions (depicted below),
and Adopters which has columns for id, address, phone number, and name.
-- Dogs table has the columns id, name, gender, age, weight, intake_date, breed, and in_foster.
NOTE: Shelter dogs’ breeds are typically guessed by the intake team, so the column may have multiple words. I.E. labrador collie mix
-- Cats table has the columns id, name, gender, age, intake_date, adoption_date
-- Adoptions table has the columns id, adopter, cat, dog, fee, date
    SELECT Adopters.first_name, Cats.name
    FROM Adoptions
    JOIN Adopters ON Adopters.id = Adoptions.adopter
    JOIN Cats ON Cats.id = Adoptions.cat
    WHERE Cats.name = 'Seashell';

10.  Given the tables Books (isbn, title, author), Transactions(id, checked_out_date, checked_in_date, user_id, isbn),
Holds(id, isbn, user_id, rank, date), and Patrons(id, name, fine_amount), write queries to find the following information:
-- To discern if the library should buy more copies of a given book, please provide the names and position, in order, of all
of the patrons waiting in line for Harry Potter and the Sorcerer’s Stone.
    SELECT Patrons.name, Holds.rank
    FROM Holds
    JOIN Patrons ON Patrons.id = Holds.user_id
    WHERE Holds.isbn = 'a12'
    ORDER BY Holds.rank;

-- Make a list of all book titles and denote whether or not a copy of that book is checked out.
    SELECT Books.title, Transactions.checked_out_date
    FROM Transactions
    RIGHT OUTER JOIN Books ON Books.isbn = Transactions.isbn;

-- In an effort to learn which books take longer to read, the librarians would like you to create a list of
total checked out time by book name in the past month.
    SELECT Transactions.checked_in_date - Transactions.checked_out_date AS time, Books.title
    FROM Transactions
    JOIN Books ON Books.isbn = Transactions.isbn

-- In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.
    SELECT Books.title
    FROM Books, Transactions
    WHERE Transactions.checked_out_date < '2013-01-01';

*-- List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.
    SELECT Patrons.name, Books.title
    FROM Transactions
    RIGHT JOIN Patrons ON Patrons.id = Transactions.id
    LEFT JOIN Books ON Books.isbn = Transactions.isbn;
